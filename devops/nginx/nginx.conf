user nginx;
worker_processes auto; # Hoặc 1 nếu bạn chắc chắn chỉ cần 1 core

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log main;
    error_log   /var/log/nginx/error.log warn; # Có thể đặt error_log ở đây hoặc trong từng server block

    sendfile        on;
    #tcp_nopush     on;
    keepalive_timeout  65;
    #gzip  on;

    # Định nghĩa zone cho rate limiting
    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s; # 10 requests per second

    # --- Upstream Definitions ---
    # Giả định các service instance (kể cả backup) đều lắng nghe trên cùng 1 cổng nội bộ
    # như đã cấu hình trong docker-compose.yml (ví dụ: identity-service-1 và identity-service-2 đều trên 5001)

    upstream identity_service_load_balancer {
        least_conn;
        server identity-service-1:5001 max_fails=3 fail_timeout=30s;
        server identity-service-2:5001 backup; # identity-service-2 cũng lắng nghe trên 5001
    }

    upstream functional_service_load_balancer {
        least_conn;
        server functional-service-1:5000 max_fails=3 fail_timeout=30s;
        server functional-service-2:5000 backup; # functional-service-2 cũng lắng nghe trên 5000
    }

    upstream property_service_load_balancer {
        least_conn;
        server property-service-1:5002 max_fails=3 fail_timeout=30s;
        server property-service-2:5002 backup; # property-service-2 cũng lắng nghe trên 5002
    }

    upstream payment_service_load_balancer {
        least_conn;
        server payment-service-1:5003 max_fails=3 fail_timeout=30s;
        server payment-service-2:5003 backup; # payment-service-2 cũng lắng nghe trên 5003
    }
    # --- End Upstream Definitions ---


    # Server block cho HTTP (Cổng 80) - Chuyển hướng sang HTTPS
    server {
        listen 80;
        server_name localhost estate-elite.com www.estate-elite.com; # Thêm www nếu cần

        # Ghi log riêng cho việc redirect (tùy chọn)
        # access_log /var/log/nginx/http_redirect_access.log main;
        # error_log /var/log/nginx/http_redirect_error.log warn;

        location / {
            return 301 https://$host$request_uri;
        }

        # Nếu bạn muốn health check trên HTTP cho Nginx trước khi redirect (ví dụ: cho AWS ELB)
        # location /health {
        #     return 200 "OK";
        #     access_log off;
        # }
    }

    # Server block cho HTTPS (Cổng 443)
    server {
        listen 443 ssl;
        http2 on; # Bật HTTP/2
        server_name localhost estate-elite.com www.estate-elite.com; # Đảm bảo khớp với chứng chỉ CN hoặc SANs

        # Cấu hình SSL
        ssl_certificate /etc/nginx/ssl/domain.crt;
        ssl_certificate_key /etc/nginx/ssl/domain.key;

        # Cấu hình SSL/TLS (tham khảo các best practice hiện tại)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_session_cache shared:SSL:10m; # 10MB cache, dùng chung giữa các worker
        ssl_session_timeout 10m;
        # ssl_session_tickets off; # Cân nhắc về bảo mật và performance

        # Bật HSTS (HTTP Strict Transport Security) - Khuyến nghị
        # Sau khi chắc chắn mọi thứ hoạt động tốt với HTTPS
        # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        # Security Headers khác (tùy chọn)
        # add_header X-Frame-Options "SAMEORIGIN" always;
        # add_header X-Content-Type-Options "nosniff" always;
        # add_header X-XSS-Protection "1; mode=block" always;
        # add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; connect-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline'; font-src 'self' data:;" always;


        # Thêm kiểm tra API Token trước khi cho phép yêu cầu đi tiếp (đã bị comment lại từ file gốc)
        # set $auth_header $http_authorization;
        # if ($auth_header = "") {
        #     return 401 "Unauthorized";
        # }

        # --- Location Blocks for Microservices ---
        location /identity/ {
            proxy_pass http://identity_service_load_balancer/; # Dấu / ở cuối quan trọng
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme; # $scheme sẽ là 'https'
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port; # $server_port sẽ là '443'

            # Cài đặt cho gRPC nếu /identity/ cũng phục vụ gRPC
            proxy_http_version 1.1; # Cần thiết cho keep-alive và gRPC-Web
            # proxy_set_header Upgrade $http_upgrade; # Cho WebSockets nếu có
            # proxy_set_header Connection "upgrade";   # Cho WebSockets nếu có
            proxy_set_header Connection "";
            
            limit_req zone=one burst=5 nodelay;
        }

        location /functional/ {
            proxy_pass http://functional_service_load_balancer/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            limit_req zone=one burst=5 nodelay;
        }

        location /property/ {
            proxy_pass http://property_service_load_balancer/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            limit_req zone=one burst=5 nodelay;
        }

        location /payment/ {
            proxy_pass http://payment_service_load_balancer/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            limit_req zone=one burst=5 nodelay;
        }
        # --- End Location Blocks ---

        # Ghi log riêng cho HTTPS (tùy chọn, nếu không sẽ dùng log chung ở http block)
        access_log /var/log/nginx/https_access.log main; # Ghi đè access_log ở http block
        error_log /var/log/nginx/https_error.log warn;    # Ghi đè error_log ở http block

        # Default location nếu không khớp các location trên
        # location / {
        #     # Có thể phục vụ static files hoặc trả về lỗi 404
        #     root /usr/share/nginx/html; # Thư mục mặc định của Nginx
        #     index index.html index.htm;
        #     try_files $uri $uri/ =404;
        # }
    }
}