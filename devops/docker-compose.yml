version: "3.8"

# Common environment variables extracted for consistency and easier management
x-common-variables: &common-variables
  POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
  POSTGRES_PORT: ${POSTGRES_PORT:-5432}
  POSTGRES_DB: ${POSTGRES_DB:-estate_elite}
  POSTGRES_USER: ${POSTGRES_USER:-estate_user}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-strongPasswordHere}
  REDIS_HOST: ${REDIS_HOST:-redis}
  REDIS_PORT: ${REDIS_PORT:-6379}
  REDIS_PASSWORD: ${REDIS_PASSWORD:-strongRedisPasswordHere}
  RABBITMQ_HOST: ${RABBITMQ_HOST:-rabbitmq}
  RABBITMQ_USER: ${RABBITMQ_USER:-estate_user}
  RABBITMQ_PASS: ${RABBITMQ_PASSWORD:-strongRabbitPasswordHere}
  RABBITMQ_VHOST: ${RABBITMQ_VHOST:-/}
  RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
  RABBITMQ_RETRY_COUNT: ${RABBITMQ_RETRY_COUNT:-10}
  MINIO_HOST: ${MINIO_HOST:-minio}
  MINIO_PORT: ${MINIO_PORT:-9000}
  MINIO_ROOT_USER: ${MINIO_USER:-miniouser}
  MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-strongMinioPasswordHere}
  MINIO_USE_SSL: ${MINIO_USE_SSL:-false}

# Common service settings for application services
x-service-defaults: &service-defaults
  restart: unless-stopped
  networks:
    - app_network
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

# Common settings for microservices
x-microservice-defaults: &microservice-defaults
  <<: *service-defaults
  environment:
    - ASPNETCORE_ENVIRONMENT=${ENVIRONMENT:-Development}
    - ConnectionStrings__PostgresConnection=Host=${POSTGRES_HOST:-postgres};Port=${POSTGRES_PORT:-5432};Database=${POSTGRES_DB:-estate_elite};Username=${POSTGRES_USER:-estate_user};Password=${POSTGRES_PASSWORD:-strongPasswordHere}
    - ConnectionStrings__Redis=${REDIS_HOST:-redis}:${REDIS_PORT:-6379},password=${REDIS_PASSWORD:-strongRedisPasswordHere}
    - RabbitMQ__HostName=${RABBITMQ_HOST:-rabbitmq}
    - RabbitMQ__UserName=${RABBITMQ_USER:-estate_user}
    - RabbitMQ__Password=${RABBITMQ_PASSWORD:-strongRabbitPasswordHere}
    - RabbitMQ__VirtualHost=${RABBITMQ_VHOST:-/}
    - RabbitMQ__Port=${RABBITMQ_PORT:-5672}
    - RabbitMQ__RetryCount=${RABBITMQ_RETRY_COUNT:-10}
    - JWT__SecretKey=${JWT_SECRET_KEY}
    - JWT__Issuer=${JWT_ISSUER:-https://localhost:5001}
    - JWT__Audience=${JWT_AUDIENCE:-https://localhost:3000}
    - JWT__AccessTokenExpirationInMinutes=${JWT_ACCESS_TOKEN_EXPIRATION_MINUTES:-30}
    - JWT__RefreshTokenExpirationInDays=${JWT_REFRESH_TOKEN_EXPIRATION_DAYS:-1}
    - JWT__RefreshTokenSlidingExpirationInMinutes=${JWT_REFRESH_TOKEN_SLIDING_EXPIRATION_MINUTES:-30}
    - JWT__TokenType=${JWT_TOKEN_TYPE:-Bearer}
    - Serilog__MinimumLevel__Default=Information
    - Serilog__MinimumLevel__Override__Microsoft=Warning
    - Serilog__MinimumLevel__Override__System=Warning
    - Serilog__MinimumLevel__Override__Microsoft.AspNetCore=Warning
    - Serilog__MinimumLevel__Override__Microsoft.EntityFrameworkCore=Warning
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
    rabbitmq:
      condition: service_healthy

services:
  # Infrastructure Services
  postgres:
    <<: *service-defaults
    image: postgres:16-alpine
    container_name: ${PROJECT_PREFIX:-estate}-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-estate_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-strongPasswordHere}
      POSTGRES_DB: ${POSTGRES_DB:-estate_elite}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-estate_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    <<: *service-defaults
    image: redis:alpine
    container_name: ${PROJECT_PREFIX:-estate}-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-strongRedisPasswordHere} --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "-a",
          "${REDIS_PASSWORD:-strongRedisPasswordHere}",
          "ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    <<: *service-defaults
    image: minio/minio:latest
    container_name: ${PROJECT_PREFIX:-estate}-minio
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_USER:-miniouser}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-strongMinioPasswordHere}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 5

  rabbitmq:
    <<: *service-defaults
    image: rabbitmq:management-alpine
    container_name: ${PROJECT_PREFIX:-estate}-rabbitmq
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-estate_user}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-strongRabbitPasswordHere}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Application Services
  functional-service-1:
    <<: *microservice-defaults
    build:
      context: ${FUNCTIONAL_SERVICE_CONTEXT:-../src}
      dockerfile: ${FUNCTIONAL_SERVICE_DOCKERFILE:-functional-service.dockerfile}
      args:
        - ENVIRONMENT=${ENVIRONMENT:-Development}
    container_name: ${PROJECT_PREFIX:-estate}-functional-service-1
    ports:
      - "${FUNCTIONAL_HTTP_PORT_1:-5000}:5000"
      - "${FUNCTIONAL_HTTPS_PORT_1:-5100}:5100"
    environment:
      - ServiceName=Functional
      - SmtpSetting__Server=${SMTP_SERVER:-smtp.gmail.com}
      - SmtpSetting__Port=${SMTP_PORT:-587}
      - SmtpSetting__Username=${SMTP_USERNAME}
      - SmtpSetting__Password=${SMTP_PASSWORD}
      - SmtpSetting__SenderEmail=${SMTP_SENDER_EMAIL}
      - SmtpSetting__SenderName=${SMTP_SENDER_NAME:-"Estate Elite"}
    volumes:
      - functional_logs:/app/logs

  functional-service-2:
    <<: *microservice-defaults
    build:
      context: ${FUNCTIONAL_SERVICE_CONTEXT:-../src}
      dockerfile: ${FUNCTIONAL_SERVICE_DOCKERFILE:-functional-service.dockerfile}
      args:
        - ENVIRONMENT=${ENVIRONMENT:-Development}
    container_name: ${PROJECT_PREFIX:-estate}-functional-service-2
    ports:
      - "${FUNCTIONAL_HTTP_PORT_2:-5200}:5000"
      - "${FUNCTIONAL_HTTPS_PORT_2:-5300}:5100"
    environment:
      - ServiceName=Functional
      - SmtpSetting__Server=${SMTP_SERVER:-smtp.gmail.com}
      - SmtpSetting__Port=${SMTP_PORT:-587}
      - SmtpSetting__Username=${SMTP_USERNAME}
      - SmtpSetting__Password=${SMTP_PASSWORD}
      - SmtpSetting__SenderEmail=${SMTP_SENDER_EMAIL}
      - SmtpSetting__SenderName=${SMTP_SENDER_NAME:-"Estate Elite"}
    volumes:
      - functional_logs:/app/logs

  identity-service-1:
    <<: *microservice-defaults
    build:
      context: ${IDENTITY_SERVICE_CONTEXT:-../src}
      dockerfile: ${IDENTITY_SERVICE_DOCKERFILE:-identity-service.dockerfile}
      args:
        - ENVIRONMENT=${ENVIRONMENT:-Development}
    container_name: ${PROJECT_PREFIX:-estate}-identity-service-1
    ports:
      - "${IDENTITY_HTTP_PORT_1:-5001}:5001"
      - "${IDENTITY_HTTPS_PORT_1:-5101}:5101"
    environment:
      - ServiceName=Identity
      - Minio__Endpoint=http://${MINIO_HOST:-minio}:${MINIO_PORT:-9000}
      - Minio__AccessKey=${MINIO_USER:-miniouser}
      - Minio__SecretKey=${MINIO_PASSWORD:-strongMinioPasswordHere}
      - Minio__UseSSL=${MINIO_USE_SSL:-false}
      - Minio__BucketName=${MINIO_IDENTITY_BUCKET:-identity-service}
      - Google__ClientId=${GOOGLE_CLIENT_ID}
      - Google__ClientSecret=${GOOGLE_CLIENT_SECRET}
      - ConfirmationCode__AllowedChars=${CONFIRMATION_CODE_ALLOWED_CHARS:-0123456789}
      - ConfirmationCode__CodeLength=${CONFIRMATION_CODE_LENGTH:-6}
      - ConfirmationCode__ExpirationTimeInMinutes=${CONFIRMATION_CODE_EXPIRATION_MINUTES:-5}
      - ConfirmationCode__MaximumAttempts=${CONFIRMATION_CODE_MAX_ATTEMPTS:-3}
    volumes:
      - identity_logs:/app/logs
    depends_on:
      minio:
        condition: service_healthy

  identity-service-2:
    <<: *microservice-defaults
    build:
      context: ${IDENTITY_SERVICE_CONTEXT:-../src}
      dockerfile: ${IDENTITY_SERVICE_DOCKERFILE:-identity-service.dockerfile}
      args:
        - ENVIRONMENT=${ENVIRONMENT:-Development}
    container_name: ${PROJECT_PREFIX:-estate}-identity-service-2
    ports:
      - "${IDENTITY_HTTP_PORT_2:-5201}:5001"
      - "${IDENTITY_HTTPS_PORT_2:-5301}:5101"
    environment:
      - ServiceName=Identity
      - Minio__Endpoint=http://${MINIO_HOST:-minio}:${MINIO_PORT:-9000}
      - Minio__AccessKey=${MINIO_USER:-miniouser}
      - Minio__SecretKey=${MINIO_PASSWORD:-strongMinioPasswordHere}
      - Minio__UseSSL=${MINIO_USE_SSL:-false}
      - Minio__BucketName=${MINIO_IDENTITY_BUCKET:-identity-service}
      - Google__ClientId=${GOOGLE_CLIENT_ID}
      - Google__ClientSecret=${GOOGLE_CLIENT_SECRET}
      - ConfirmationCode__AllowedChars=${CONFIRMATION_CODE_ALLOWED_CHARS:-0123456789}
      - ConfirmationCode__CodeLength=${CONFIRMATION_CODE_LENGTH:-6}
      - ConfirmationCode__ExpirationTimeInMinutes=${CONFIRMATION_CODE_EXPIRATION_MINUTES:-5}
      - ConfirmationCode__MaximumAttempts=${CONFIRMATION_CODE_MAX_ATTEMPTS:-3}
    volumes:
      - identity_logs:/app/logs
    depends_on:
      minio:
        condition: service_healthy

  payment-service-1:
    <<: *microservice-defaults
    build:
      context: ${PAYMENT_SERVICE_CONTEXT:-../src}
      dockerfile: ${PAYMENT_SERVICE_DOCKERFILE:-payment-service.dockerfile}
      args:
        - ENVIRONMENT=${ENVIRONMENT:-Development}
    container_name: ${PROJECT_PREFIX:-estate}-payment-service-1
    ports:
      - "${PAYMENT_HTTP_PORT_1:-5003}:5003"
      - "${PAYMENT_HTTPS_PORT_1:-5103}:5103"
    environment:
      - ServiceName=PaymentService
      - ConnectionStrings__Redis=${REDIS_HOST:-redis}:${REDIS_PORT:-6379},password=${REDIS_PASSWORD:-strongRedisPasswordHere},defaultDatabase=2
      - Paypal__ClientId=${PAYPAL_CLIENT_ID}
      - Paypal__ClientSecret=${PAYPAL_CLIENT_SECRET}
      - Paypal__UseSandbox=${PAYPAL_USE_SANDBOX:-true}
    volumes:
      - payment_logs:/app/logs

  payment-service-2:
    <<: *microservice-defaults
    build:
      context: ${PAYMENT_SERVICE_CONTEXT:-../src}
      dockerfile: ${PAYMENT_SERVICE_DOCKERFILE:-payment-service.dockerfile}
      args:
        - ENVIRONMENT=${ENVIRONMENT:-Development}
    container_name: ${PROJECT_PREFIX:-estate}-payment-service-2
    ports:
      - "${PAYMENT_HTTP_PORT_2:-5202}:5002"
      - "${PAYMENT_HTTPS_PORT_2:-5302}:5102"
    environment:
      - ServiceName=PaymentService
      - ConnectionStrings__Redis=${REDIS_HOST:-redis}:${REDIS_PORT:-6379},password=${REDIS_PASSWORD:-strongRedisPasswordHere},defaultDatabase=2
      - Paypal__ClientId=${PAYPAL_CLIENT_ID}
      - Paypal__ClientSecret=${PAYPAL_CLIENT_SECRET}
      - Paypal__UseSandbox=${PAYPAL_USE_SANDBOX:-true}
    volumes:
      - payment_logs:/app/logs

  property-service-1:
    <<: *microservice-defaults
    build:
      context: ${PROPERTY_SERVICE_CONTEXT:-../src}
      dockerfile: ${PROPERTY_SERVICE_DOCKERFILE:-property-service.dockerfile}
      args:
        - ENVIRONMENT=${ENVIRONMENT:-Development}
    container_name: ${PROJECT_PREFIX:-estate}-property-service-1
    ports:
      - "${PROPERTY_HTTP_PORT_1:-5002}:5002"
      - "${PROPERTY_HTTPS_PORT_1:-5102}:5102"
    environment:
      - ServiceName=Property
      - ConnectionStrings__Redis=${REDIS_HOST:-redis}:${REDIS_PORT:-6379},password=${REDIS_PASSWORD:-strongRedisPasswordHere},defaultDatabase=1
      - Minio__Endpoint=http://${MINIO_HOST:-minio}:${MINIO_PORT:-9000}
      - Minio__AccessKey=${MINIO_USER:-miniouser}
      - Minio__SecretKey=${MINIO_PASSWORD:-strongMinioPasswordHere}
      - Minio__UseSSL=${MINIO_USE_SSL:-false}
      - Minio__BucketName=${MINIO_PROPERTY_BUCKET:-property-service}
    volumes:
      - property_logs:/app/logs
    depends_on:
      minio:
        condition: service_healthy

  property-service-2:
    <<: *microservice-defaults
    build:
      context: ${PROPERTY_SERVICE_CONTEXT:-../src}
      dockerfile: ${PROPERTY_SERVICE_DOCKERFILE:-property-service.dockerfile}
      args:
        - ENVIRONMENT=${ENVIRONMENT:-Development}
    container_name: ${PROJECT_PREFIX:-estate}-property-service-2
    ports:
      - "${PROPERTY_HTTP_PORT_2:-5203}:5003"
      - "${PROPERTY_HTTPS_PORT_2:-5303}:5103"
    environment:
      - ServiceName=Property
      - ConnectionStrings__Redis=${REDIS_HOST:-redis}:${REDIS_PORT:-6379},password=${REDIS_PASSWORD:-strongRedisPasswordHere},defaultDatabase=1
      - Minio__Endpoint=http://${MINIO_HOST:-minio}:${MINIO_PORT:-9000}
      - Minio__AccessKey=${MINIO_USER:-miniouser}
      - Minio__SecretKey=${MINIO_PASSWORD:-strongMinioPasswordHere}
      - Minio__UseSSL=${MINIO_USE_SSL:-false}
      - Minio__BucketName=${MINIO_PROPERTY_BUCKET:-property-service}
    volumes:
      - property_logs:/app/logs
    depends_on:
      minio:
        condition: service_healthy

  nginx:
    <<: *service-defaults
    build:
      context: ${NGINX_CONTEXT:-./nginx}
      dockerfile: ${NGINX_DOCKERFILE:-nginx.dockerfile}
    container_name: ${PROJECT_PREFIX:-estate}-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - functional-service-1
      - functional-service-2
      - identity-service-1
      - identity-service-2
      - payment-service-1
      - payment-service-2
      - property-service-1
      - property-service-2

networks:
  app_network:
    driver: bridge
    name: ${PROJECT_PREFIX:-estate}_network

volumes:
  postgres_data:
    name: ${PROJECT_PREFIX:-estate}_postgres_data
  redis_data:
    name: ${PROJECT_PREFIX:-estate}_redis_data
  minio_data:
    name: ${PROJECT_PREFIX:-estate}_minio_data
  rabbitmq_data:
    name: ${PROJECT_PREFIX:-estate}_rabbitmq_data
  functional_logs:
    name: ${PROJECT_PREFIX:-estate}_functional_logs
  identity_logs:
    name: ${PROJECT_PREFIX:-estate}_identity_logs
  payment_logs:
    name: ${PROJECT_PREFIX:-estate}_payment_logs
  property_logs:
    name: ${PROJECT_PREFIX:-estate}_property_logs
